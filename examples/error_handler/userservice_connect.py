# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: userservice.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import userservice_pb2 as userservice__pb2


class UserService(Protocol):
    async def create_user(self, request: userservice__pb2.UserRequest, ctx: RequestContext) -> userservice__pb2.UserResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def delete_user(self, request: userservice__pb2.UserRequest, ctx: RequestContext) -> userservice__pb2.UserResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def update_user(self, request: userservice__pb2.UserRequest, ctx: RequestContext) -> userservice__pb2.UserResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class UserServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: UserService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/examples.error_handler.v1.UserService/CreateUser": Endpoint.unary(
                    method=MethodInfo(
                        name="CreateUser",
                        service_name="examples.error_handler.v1.UserService",
                        input=userservice__pb2.UserRequest,
                        output=userservice__pb2.UserResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.create_user,
                ),
                "/examples.error_handler.v1.UserService/DeleteUser": Endpoint.unary(
                    method=MethodInfo(
                        name="DeleteUser",
                        service_name="examples.error_handler.v1.UserService",
                        input=userservice__pb2.UserRequest,
                        output=userservice__pb2.UserResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.delete_user,
                ),
                "/examples.error_handler.v1.UserService/UpdateUser": Endpoint.unary(
                    method=MethodInfo(
                        name="UpdateUser",
                        service_name="examples.error_handler.v1.UserService",
                        input=userservice__pb2.UserRequest,
                        output=userservice__pb2.UserResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.update_user,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/examples.error_handler.v1.UserService"


class UserServiceClient(ConnectClient):
    async def create_user(
        self,
        request: userservice__pb2.UserRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> userservice__pb2.UserResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="CreateUser",
                service_name="examples.error_handler.v1.UserService",
                input=userservice__pb2.UserRequest,
                output=userservice__pb2.UserResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def delete_user(
        self,
        request: userservice__pb2.UserRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> userservice__pb2.UserResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DeleteUser",
                service_name="examples.error_handler.v1.UserService",
                input=userservice__pb2.UserRequest,
                output=userservice__pb2.UserResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def update_user(
        self,
        request: userservice__pb2.UserRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> userservice__pb2.UserResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UpdateUser",
                service_name="examples.error_handler.v1.UserService",
                input=userservice__pb2.UserRequest,
                output=userservice__pb2.UserResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class UserServiceSync(Protocol):
    def create_user(self, request: userservice__pb2.UserRequest, ctx: RequestContext) -> userservice__pb2.UserResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def delete_user(self, request: userservice__pb2.UserRequest, ctx: RequestContext) -> userservice__pb2.UserResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def update_user(self, request: userservice__pb2.UserRequest, ctx: RequestContext) -> userservice__pb2.UserResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class UserServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: UserServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/examples.error_handler.v1.UserService/CreateUser": EndpointSync.unary(
                    method=MethodInfo(
                        name="CreateUser",
                        service_name="examples.error_handler.v1.UserService",
                        input=userservice__pb2.UserRequest,
                        output=userservice__pb2.UserResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.create_user,
                ),
                "/examples.error_handler.v1.UserService/DeleteUser": EndpointSync.unary(
                    method=MethodInfo(
                        name="DeleteUser",
                        service_name="examples.error_handler.v1.UserService",
                        input=userservice__pb2.UserRequest,
                        output=userservice__pb2.UserResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.delete_user,
                ),
                "/examples.error_handler.v1.UserService/UpdateUser": EndpointSync.unary(
                    method=MethodInfo(
                        name="UpdateUser",
                        service_name="examples.error_handler.v1.UserService",
                        input=userservice__pb2.UserRequest,
                        output=userservice__pb2.UserResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.update_user,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/examples.error_handler.v1.UserService"


class UserServiceClientSync(ConnectClientSync):
    def create_user(
        self,
        request: userservice__pb2.UserRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> userservice__pb2.UserResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="CreateUser",
                service_name="examples.error_handler.v1.UserService",
                input=userservice__pb2.UserRequest,
                output=userservice__pb2.UserResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def delete_user(
        self,
        request: userservice__pb2.UserRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> userservice__pb2.UserResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DeleteUser",
                service_name="examples.error_handler.v1.UserService",
                input=userservice__pb2.UserRequest,
                output=userservice__pb2.UserResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def update_user(
        self,
        request: userservice__pb2.UserRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> userservice__pb2.UserResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UpdateUser",
                service_name="examples.error_handler.v1.UserService",
                input=userservice__pb2.UserRequest,
                output=userservice__pb2.UserResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
